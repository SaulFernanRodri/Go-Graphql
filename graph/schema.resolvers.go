package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"go-graphql/graph/model"
)

// Mutation: Create a new user
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.NewUserInput) (*model.User, error) {
	return r.UserResolver.CreateUser(ctx, input)
}

// Mutation: Update a user
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name string, email string) (*model.User, error) {
	return r.UserResolver.UpdateUser(ctx, id, name, email)
}

// Mutation: Delete a user
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	return r.UserResolver.DeleteUser(ctx, id)
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input *model.NewOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: DeleteOrder - deleteOrder"))
}

// Query: Fetch all users
func (r *queryResolver) All(ctx context.Context) ([]*model.User, error) {
	return r.UserResolver.All(ctx)
}

// Query: Find user by ID
func (r *queryResolver) Find(ctx context.Context, id string) (*model.User, error) {
	return r.UserResolver.Find(ctx, id)
}

// Query: Find user by email
func (r *queryResolver) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	return r.UserResolver.FindByEmail(ctx, email)
}

// AllOrders is the resolver for the allOrders field.
func (r *queryResolver) AllOrders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: AllOrders - allOrders"))
}

// FindOrder is the resolver for the findOrder field.
func (r *queryResolver) FindOrder(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: FindOrder - findOrder"))
}

// FindOrderByUser is the resolver for the findOrderByUser field.
func (r *queryResolver) FindOrderByUser(ctx context.Context, id string) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: FindOrderByUser - findOrderByUser"))
}

// Subscription: Listen for new users
func (r *subscriptionResolver) UserCreated(ctx context.Context) (<-chan *model.User, error) {
	return r.UserResolver.UserCreated(ctx)
}

// OrderCreated is the resolver for the orderCreated field.
func (r *subscriptionResolver) OrderCreated(ctx context.Context) (<-chan *model.Order, error) {
	panic(fmt.Errorf("not implemented: OrderCreated - orderCreated"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

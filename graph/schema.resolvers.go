package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"go-graphql/graph/model"
	"go-graphql/utils"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.NewUserInput) (*model.User, error) {
	hashedPassword, err := utils.HashPassword(input.Password)
	if err != nil {
		return nil, err
	}
	user := &model.User{
		ID:       fmt.Sprintf("T%d", len(r.Resolver.Users)+1),
		Name:     input.Name,
		Email:    input.Email,
		Password: hashedPassword,
		Activate: input.Activate,
	}
	r.Resolver.Users = append(r.Resolver.Users, user)
	
	go func() {
		r.Resolver.UserCreated <- user
	}()

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name string, email string) (*model.User, error) {
	for _, user := range r.Resolver.Users {
		if user.ID == id {
			user.Name = name
			user.Email = email
			return user, nil
		}
	}
	return nil, fmt.Errorf("user %s not found", id)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	for i, user := range r.Resolver.Users {
		if user.ID == id {
			r.Resolver.Users = append(r.Resolver.Users[:i], r.Resolver.Users[i+1:]...)
			return user, nil
		}
	}
	return nil, fmt.Errorf("user %s not found", id)
}

// All is the resolver for the all field.
func (r *queryResolver) All(ctx context.Context) ([]*model.User, error) {
	return r.Resolver.Users, nil
}

// Find is the resolver for the find field.
func (r *queryResolver) Find(ctx context.Context, id string) (*model.User, error) {
	for _, user := range r.Resolver.Users {
		if user.ID == id {
			return user, nil
		}
	}
	return nil, fmt.Errorf("user %s not found", id)
}

// FindByEmail is the resolver for the findByEmail field.
func (r *queryResolver) FindByEmail(ctx context.Context, email string) (*model.User, error) {
	for _, user := range r.Resolver.Users {
		if user.Email == email {
			return user, nil
		}
	}
	return nil, fmt.Errorf("user with email %s not found", email)
}

// UserCreated is the resolver for the userCreated field.
func (r *subscriptionResolver) UserCreated(ctx context.Context) (<-chan *model.User, error) {
	return r.Resolver.UserCreated, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
